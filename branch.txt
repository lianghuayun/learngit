*分支管理******************************
*分支创建******************************
1. git switch -c dev
//git branch           命令查看当前分支
//git switch 分支名  切换分支
//git merge dev        把dev分支的工作成果合并到master分支上
//git branch -d dev    删除分支
*因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

*解决冲突******************************
//解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
//git log --graph      看到分支合并图

*分支策略******************************
*	在实际开发中，我们应该按照几个基本原则进行分支管理：
*首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
*那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
*你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
*bug***********************************
//把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash
//首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
$ git checkout master
$ git checkout -b issue-101  从master创建临时分支：
//修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
$ git switch master
$ git merge --no-ff -m "merged bug fix 101" issue-101
//接着回到dev分支干活:
$ git switch dev
$ git stash pop              恢复的同时把stash内容也删了
*feature*******************************
*开发一个新feature，最好新建一个分支；
*如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。